{"version":3,"sources":["App.js","index.js"],"names":["TextInput","props","tookInput","e","target","value","substring","length","charAt","inputRef","current","style","backgroundColor","setTimeout","callback","React","createRef","this","focus","className","spellcheck","id","type","ref","onChange","Component","App","randSel","level","lvlwords","lexicon","Math","floor","random","reloadTarget","setState","state","slice","begin","begun","console","log","handleKeys","onKeyEvent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAMMA,G,wDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAQPC,UAAY,SAACC,GACTA,EAAEC,OAAOC,QAAU,EAAKJ,MAAMG,OAAOE,UAAU,EAAGH,EAAEC,OAAOC,MAAME,QACb,MAAnDJ,EAAEC,OAAOC,MAAMG,OAAOL,EAAEC,OAAOC,MAAME,OAAO,IAC9C,EAAKE,SAASC,QAAQL,MAAQF,EAAEC,OAAOC,MAAMC,UAAU,EAAGH,EAAEC,OAAOC,MAAME,OAAO,GAChF,EAAKE,SAASC,QAAQC,MAAMC,gBAAkB,oBAC9CC,YAAW,WACV,EAAKJ,SAASC,QAAQC,MAAMC,gBAAkB,gBAC5C,MAEH,EAAKH,SAASC,QAAQL,MAAQ,GAG/B,EAAKI,SAASC,QAAQC,MAAMC,gBAAkB,cAG5CT,EAAEC,OAAOC,QAAU,EAAKJ,MAAMG,SAChC,EAAKH,MAAMa,WACX,EAAKL,SAASC,QAAQL,MAAQ,KAxB/B,EAAKI,SAAWM,IAAMC,YAFJ,E,gEAMlBC,KAAKR,SAASC,QAAQQ,U,+BAyBtB,OACC,2BAAOC,UAAU,QACfF,KAAKhB,MAAMG,OACZ,2BAAOgB,WAAW,QAAQC,GAAG,QAAQC,KAAK,OAAOC,IAAKN,KAAKR,SAAUe,SAAUP,KAAKf,UAAWiB,UAAU,c,GAnCrFJ,IAAMU,Y,IAgHfC,E,kDA7Cd,WAAYzB,GAAQ,IAAD,8BAClB,cAAMA,IAQP0B,QAAU,SAACC,GACV,IAAIC,EAAWC,EAAQF,GACvB,OAAOC,EAASE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAStB,UAXlC,EAcnB2B,aAAe,WACd,EAAKC,SAAS,CACbL,QAAS,EAAKM,MAAMN,QAAQO,MAAM,MAhBjB,EAoBnBC,MAAQ,WACP,EAAKH,SAAS,CACbI,OAAO,KApBR,EAAKH,MAAQ,CACZhC,OAAQ,EAAKuB,QAAQ,OACrBY,OAAO,GAERC,QAAQC,IAAIX,GANM,E,qDA2BlB,OAAGb,KAAKmB,MAAMG,MAEZ,kBAAC,EAAD,CAAWzB,SAAUG,KAAKiB,aAAc9B,OAAQa,KAAKmB,MAAMN,QAAQ,KAInE,6BACC,yBAAKX,UAAU,UAAf,0BAGA,kBAAC,IAAD,CAAsBuB,WAAY,CAAC,SAAUC,WAAY1B,KAAKqB,a,GAtCjDvB,IAAMU,WCnExBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.6d686127.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport lexicon from './wordlist.json';\nimport './App.css';\n\nclass TextInput extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.inputRef = React.createRef();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.inputRef.current.focus();\n\t}\n\n\ttookInput = (e) => {\n\t\tif(e.target.value !== this.props.target.substring(0, e.target.value.length)) {\n\t\t\tif(e.target.value.charAt(e.target.value.length-1) !== ' ') {\n\t\t\t\tthis.inputRef.current.value = e.target.value.substring(0, e.target.value.length-1);\n\t\t\t\tthis.inputRef.current.style.backgroundColor = \"rgba(200,0,0,0.4)\";\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.inputRef.current.style.backgroundColor = \"transparent\";\n\t\t\t\t}, 1000);\n\t\t\t} else {\n\t\t\t\tthis.inputRef.current.value = '';\n\t\t\t}\n\t\t} else {\n\t\t\tthis.inputRef.current.style.backgroundColor = \"transparent\";\n\t\t}\n\n\t\tif(e.target.value === this.props.target) {\n\t\t\tthis.props.callback();\n\t\t\tthis.inputRef.current.value = '';\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<label className=\"text\">\n\t\t\t\t{this.props.target}\n\t\t\t\t<input spellcheck=\"false\" id=\"input\" type=\"text\" ref={this.inputRef} onChange={this.tookInput} className=\"text\"/>\n\t\t\t</label>\n\t\t);\n\t}\n}\n\nTextInput.propTypes = {\n\ttarget: PropTypes.string,\n\tcallback: PropTypes.func\n};\n\nfunction shuffle(passes, arr) {\n\tlet res = arr.slice(0);\n\tfor(;passes>0;passes--) {\n\t\tfor(let i = 0; i < res.length; i++) {\n\t\t\tif(Math.random() <= 0.5) {\n\t\t\t\tlet ch = res[i];\n\t\t\t\tres.splice(i, 1);\n\t\t\t\tres.unshift(ch);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\nfunction zip(a1, a2) {\n\treturn a1.map((c, i) => {\n\t\treturn \"\" + c + a2[i];\n\t});\n}\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttarget: this.randSel(\"one\"),\n\t\t\tbegun: false\n\t\t};\n\t\tconsole.log(lexicon);\n\t}\n\n\trandSel = (level) => {\n\t\tlet lvlwords = lexicon[level];\n\t\treturn lvlwords[Math.floor(Math.random() * lvlwords.length)];\n\t}\n\n\treloadTarget = () => {\n\t\tthis.setState({\n\t\t\tlexicon: this.state.lexicon.slice(1)\n\t\t});\n\t}\n\n\tbegin = () => {\n\t\tthis.setState({\n\t\t\tbegun: true\n\t\t});\n\t}\n\n\trender() {\n\t\tif(this.state.begun) {\n\t\t\treturn (\n\t\t\t\t<TextInput callback={this.reloadTarget} target={this.state.lexicon[0]}/>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"banner\">\n\t\t\t\t\tPress [SPACE] to begin\n\t\t\t\t\t</div>\n\t\t\t\t\t<KeyboardEventHandler handleKeys={['space']} onKeyEvent={this.begin}>\n\t\t\t\t\t</KeyboardEventHandler>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}